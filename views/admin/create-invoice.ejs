<%- include('../partials/head.ejs') %>
    <style>
        .invoice-preview {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            max-width: 210mm;
            background: white;
            font-family: 'Arial', sans-serif;
        }

        .invoice-border {
            border: 1px solid #d1d5db;
        }

        .amazon-table th,
        .amazon-table td {
            border: 1px solid #d1d5db;
            padding: 8px;
            text-align: left;
            vertical-align: top;
        }

        .amazon-table th {
            background-color: #f9fafb;
            font-weight: 600;
            font-size: 10px;
            text-transform: uppercase;
        }

        .amazon-table {
            border-collapse: collapse;
            width: 100%;
            font-size: 9px;
        }

        .totals-table {
            border-collapse: collapse;
            font-size: 10px;
        }

        .totals-table td {
            border: 1px solid #d1d5db;
            padding: 8px;
        }

        .totals-table .highlight-row {
            background-color: #f9fafb;
            font-weight: bold;
        }
    </style>

    <body>

        <%- include('../partials/navbar.ejs') %>

            <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                <!-- Header Controls -->
                <div class="mb-6 flex justify-between items-center">
                    <div>
                        <h1 class="text-2xl font-bold text-gray-900">Create Tax Invoice</h1>
                        <p class="text-gray-600 text-sm">Generate professional GST compliant invoice</p>
                    </div>
                    <div class="flex space-x-3">
                        <button type="button" id="generateInvoiceBtn"
                            class="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white px-6 py-2 rounded-lg font-medium transition-colors duration-200">
                            Generate Invoice PDF
                        </button>
                    </div>
                </div>

                <!-- Invoice Preview Container -->
                <div class="invoice-preview mx-auto p-8 bg-white">

                    <!-- Header Section -->
                    <div class="flex justify-between items-start mb-6">
                        <div>
                            <h1 class="text-lg font-bold text-gray-800 mb-1">TAX INVOICE</h1>
                            <p class="text-xs text-gray-600">ORIGINAL FOR RECIPIENT</p>
                        </div>
                        <div class="flex items-center">
                            <!-- Logo placeholder or company name -->
                            <div class="text-right">
                                <img src="/images/krushiyuga-logo.png" alt="Krushiyuga Logo" class="h-16 w-auto mb-2"
                                    onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                                <div class="text-lg font-bold text-gray-800 hidden">KRUSHIYUGA</div>
                            </div>
                        </div>
                    </div>

                    <!-- Company and Invoice Details -->
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-6">
                        <!-- Company Details (Left) -->
                        <div>
                            <h2 class="text-base font-bold text-gray-800 mb-2">Krushiyuga</h2>
                            <div class="text-xs text-gray-700 space-y-1">
                                <p class="font-medium">GSTIN 22AAAAA0000A1Z5</p>
                                <p>Agricultural Solutions & Services</p>
                                <p>No. 39 & 1479, DRLS Plaza Union Bank Building</p>
                                <p>Tumkur Road, Vidya Nagar, T. Dasarahalli, Bengaluru 560057</p>
                                <p>Mobile : 9876543210 Email : info@krushiyuga.com</p>
                            </div>
                        </div>

                        <!-- Invoice Details (Right) -->
                        <div class="text-right">
                            <div class="grid grid-cols-2 gap-4 text-xs">
                                <div>
                                    <label class="block font-medium text-gray-700 mb-1">Invoice #:</label>
                                    <input type="text" id="invoiceNumber" value="Auto-generated"
                                        class="w-full px-2 py-1 border border-gray-300 rounded text-xs" readonly>
                                </div>
                                <div>
                                    <label class="block font-medium text-gray-700 mb-1">Invoice Date:</label>
                                    <input type="date" id="issueDate" name="issueDate"
                                        class="w-full px-2 py-1 border border-gray-300 rounded text-xs" required>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Customer Details Section -->
                    <div class="mb-6">
                        <div class="grid grid-cols-3 gap-6">
                            <!-- Customer Details -->
                            <div>
                                <h3 class="text-xs font-bold text-gray-800 mb-2">Customer Details:</h3>
                                <div class="space-y-2">
                                    <input type="text" id="clientName" name="clientName" placeholder="Customer Name"
                                        class="w-full px-2 py-1 border border-gray-300 rounded text-xs font-medium"
                                        required>
                                    <input type="email" id="clientEmail" name="clientEmail"
                                        placeholder="customer@email.com"
                                        class="w-full px-2 py-1 border border-gray-300 rounded text-xs" required>
                                    <input type="tel" id="clientPhone" name="clientPhone" placeholder="Phone Number"
                                        class="w-full px-2 py-1 border border-gray-300 rounded text-xs">
                                </div>
                            </div>

                            <!-- Billing Address -->
                            <div>
                                <h3 class="text-xs font-bold text-gray-800 mb-2">Billing address:</h3>
                                <textarea id="billingAddress" name="billingAddress" rows="4"
                                    placeholder="Enter billing address..."
                                    class="w-full px-2 py-1 border border-gray-300 rounded text-xs resize-none"
                                    required></textarea>
                            </div>

                            <!-- Shipping Address -->
                            <div>
                                <h3 class="text-xs font-bold text-gray-800 mb-2">Shipping address:</h3>
                                <textarea id="shippingAddress" name="shippingAddress" rows="4"
                                    placeholder="Enter shipping address..."
                                    class="w-full px-2 py-1 border border-gray-300 rounded text-xs resize-none"></textarea>
                                <label class="flex items-center mt-2 text-xs">
                                    <input type="checkbox" id="sameAsBilling" class="mr-1 text-xs"> Same as billing
                                </label>
                            </div>
                        </div>

                        <!-- Place of Supply -->
                        <div class="mt-4">
                            <div class="flex items-center space-x-4">
                                <label class="text-xs font-bold text-gray-800">Place of Supply:</label>
                                <select id="placeOfSupply" name="placeOfSupply"
                                    class="px-2 py-1 border border-gray-300 rounded text-xs">
                                    <option value="KARNATAKA">KARNATAKA</option>
                                    <option value="TAMIL NADU">TAMIL NADU</option>
                                    <option value="KERALA">KERALA</option>
                                    <option value="ANDHRA PRADESH">ANDHRA PRADESH</option>
                                    <option value="TELANGANA">TELANGANA</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Items Section with Amazon-style Table -->
                    <div class="mb-6">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-sm font-bold text-gray-800">Invoice Items</h3>
                            <button type="button" id="addItemBtn"
                                class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded text-xs font-medium transition-colors duration-200">
                                Add Item
                            </button>
                        </div>

                        <!-- Items Table (Amazon Style) -->
                        <table class="amazon-table mb-4">
                            <thead>
                                <tr>
                                    <th style="width: 3%;">#</th>
                                    <th style="width: 35%;">Item</th>
                                    <th style="width: 12%;">Rate/Item</th>
                                    <th style="width: 8%;">Qty</th>
                                    <th style="width: 14%;">Taxable Value</th>
                                    <th style="width: 14%;">Tax Amount</th>
                                    <th style="width: 10%;">Amount</th>
                                    <th style="width: 4%;">Action</th>
                                </tr>
                            </thead>
                            <tbody id="itemsTableBody">
                                <!-- Items will be added dynamically -->
                            </tbody>
                        </table>

                        <!-- Add first item by default -->
                        <div id="noItemsMessage" class="text-center py-4 text-xs text-gray-500">
                            Click "Add Item" to start adding products to your invoice
                        </div>
                    </div>

                    <!-- Summary Section -->
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-6">
                        <!-- Left Side - Summary -->
                        <div>
                            <div class="text-xs space-y-2">
                                <p><span class="font-medium">Total Items / Qty:</span> <span id="totalItemsQty">0 /
                                        0</span></p>

                                <div class="mt-4">
                                    <p class="font-bold mb-2">Total amount (in words):</p>
                                    <p id="amountInWords" class="text-xs">Zero Rupees Only.</p>
                                </div>
                            </div>
                        </div>

                        <!-- Right Side - Totals Table -->
                        <div>
                            <table class="totals-table w-full ml-auto" style="width: 280px;">
                                <tr>
                                    <td class="font-medium">Taxable Amount</td>
                                    <td class="text-right">Rs. <span id="taxableAmount">0.00</span></td>
                                </tr>
                                <tr>
                                    <td class="font-medium">IGST <span id="gstRateDisplay">18</span>%</td>
                                    <td class="text-right">Rs. <span id="gstAmount">0.00</span></td>
                                </tr>
                                <tr class="highlight-row">
                                    <td class="font-bold text-base">Total</td>
                                    <td class="text-right font-bold text-base">Rs. <span id="totalAmount">0.00</span>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="font-medium">Amount Payable:</td>
                                    <td class="text-right font-medium">Rs. <span id="amountPayable">0.00</span></td>
                                </tr>
                            </table>
                        </div>
                    </div>

                    <!-- Payment and Bank Details -->
                    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                        <!-- UPI Payment -->
                        <div>
                            <h3 class="text-xs font-bold text-gray-800 mb-2">Pay using UPI:</h3>
                            <div class="border border-gray-300 p-2 text-center">
                                <img src="/images/QR-Code.png" alt="UPI QR Code" class="w-20 h-20 mx-auto"
                                    onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                                <div class="text-xs text-gray-500 hidden">QR Code Here</div>
                            </div>
                        </div>

                        <!-- Bank Details -->
                        <div>
                            <h3 class="text-xs font-bold text-gray-800 mb-2">Bank Details:</h3>
                            <div class="text-xs space-y-1">
                                <p><span class="font-medium">Bank:</span> BANK OF BARODA</p>
                                <p><span class="font-medium">Account No:</span> 33760200000952</p>
                                <p><span class="font-medium">IFSC:</span> BARB0PEENYA (Fifth character is zero)</p>
                                <p><span class="font-medium">Branch:</span> PEENYA</p>
                            </div>
                        </div>

                        <!-- Authorized Signatory -->
                        <div>
                            <div class="text-xs">
                                <p class="mb-12">For Krushiyuga</p>
                                <p class="font-medium">Authorized Signatory</p>
                            </div>
                        </div>
                    </div>

                    <!-- Notes and Terms -->
                    <div class="mb-6">
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            <div>
                                <h3 class="text-xs font-bold text-gray-800 mb-2">Notes:</h3>
                                <textarea id="invoiceNotes" name="invoiceNotes" rows="3"
                                    placeholder="Thank you for the Business"
                                    class="w-full px-2 py-1 border border-gray-300 rounded text-xs resize-none"></textarea>
                            </div>
                            <div>
                                <h3 class="text-xs font-bold text-gray-800 mb-2">Terms and Conditions:</h3>
                                <div class="text-xs text-gray-700">
                                    <p>1. Goods once sold cannot be taken back or exchanged.</p>
                                </div>
                            </div>
                        </div>
                    </div>

            </main>

            <script>
                // Product data and invoice functionality
                let products = [];
                let itemCounter = 0;

                // Fetch products when page loads
                document.addEventListener('DOMContentLoaded', function () {
                    // Set today's date as default
                    document.getElementById('issueDate').value = new Date().toISOString().split('T')[0];

                    // Auto-copy billing to shipping address
                    document.getElementById('sameAsBilling').addEventListener('change', function () {
                        if (this.checked) {
                            document.getElementById('shippingAddress').value = document.getElementById('billingAddress').value;
                        }
                    });

                    // Copy billing address when it changes
                    document.getElementById('billingAddress').addEventListener('input', function () {
                        if (document.getElementById('sameAsBilling').checked) {
                            document.getElementById('shippingAddress').value = this.value;
                        }
                    });

                    fetchProducts();
                });

                // Fetch products from API
                async function fetchProducts() {
                    try {
                        console.log('Fetching products...'); // Debug log
                        const response = await fetch('/api/products');

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const data = await response.json();
                        console.log('Products response:', data); // Debug log

                        if (data.success && data.products) {
                            products = data.products;
                            console.log('Products loaded successfully:', products.length);
                        } else {
                            throw new Error('Invalid response format');
                        }
                    } catch (error) {
                        console.error('Error fetching products:', error);
                        showNotification('Error loading products. Please refresh the page.', 'error');
                        products = [];
                    }
                }

                // Add item row (Amazon style)
                document.getElementById('addItemBtn').addEventListener('click', function () {
                    console.log('Add item button clicked, products available:', products.length); // Debug log
                    addItemRow();
                });

                function addItemRow() {
                    if (products.length === 0) {
                        showNotification('Products not loaded yet. Please wait or refresh the page.', 'warning');
                        return;
                    }

                    itemCounter++;
                    const tbody = document.getElementById('itemsTableBody');
                    const noItemsMsg = document.getElementById('noItemsMessage');

                    if (noItemsMsg) {
                        noItemsMsg.style.display = 'none';
                    }

                    const row = document.createElement('tr');
                    row.setAttribute('data-item-id', itemCounter);

                    row.innerHTML = `
                        <td style="text-align: center; vertical-align: middle; font-weight: bold;">${itemCounter}</td>
                        <td>
                            <select class="product-select w-full px-2 py-1 border border-gray-300 rounded text-xs" 
                                    onchange="populateProductDetails(this, ${itemCounter})">
                                <option value="">Select Product</option>
                                ${products.map(product =>
                        `<option value="${product._id}" 
                                            data-name="${product.name}"
                                            data-hsn="${product.hsn || ''}"
                                            data-unit="${product.unit}"
                                            data-price="${product.price}"
                                            data-gst="${product.gst}">
                                        ${product.name}
                                    </option>`
                    ).join('')}
                            </select>
                            <div class="product-description text-xs text-gray-600 mt-1"></div>
                        </td>
                        <td style="text-align: right;">
                            <span class="item-rate-display">0.00</span>
                            <input type="hidden" class="item-rate" value="0">
                        </td>
                        <td style="text-align: center;">
                            <input type="number" class="item-quantity w-full px-1 py-1 border border-gray-300 rounded text-xs text-center" 
                                   value="1" min="1" step="1" onchange="calculateRowTotal(${itemCounter})">
                        </td>
                        <td style="text-align: right;">
                            <span class="taxable-amount">0.00</span>
                        </td>
                        <td style="text-align: right;">
                            <span class="tax-amount">0.00</span> (<span class="gst-rate">18</span>%)
                        </td>
                        <td style="text-align: right; font-weight: bold;">
                            <span class="item-total">0.00</span>
                        </td>
                        <td style="text-align: center;">
                            <button type="button" onclick="removeItemRow(${itemCounter})" 
                                    class="text-red-600 hover:text-red-800 text-xs px-1 py-1 rounded">
                                ✕
                            </button>
                        </td>
                    `;

                    tbody.appendChild(row);
                    updateItemNumbers();
                }

                // Populate product details when product is selected
                function populateProductDetails(selectElement, itemId) {
                    const option = selectElement.selectedOptions[0];
                    const row = document.querySelector(`tr[data-item-id="${itemId}"]`);

                    if (option.value && row) {
                        const product = products.find(p => p._id === option.value);

                        if (product) {
                            // Show product description
                            const descDiv = row.querySelector('.product-description');
                            if (product.description) {
                                descDiv.textContent = product.description;
                            } else {
                                descDiv.textContent = '';
                            }

                            // Set rate and GST
                            row.querySelector('.item-rate').value = product.price || 0;
                            row.querySelector('.item-rate-display').textContent = (product.price || 0).toFixed(2);
                            row.querySelector('.gst-rate').textContent = product.gst || 18;

                            calculateRowTotal(itemId);
                        }
                    } else if (row) {
                        // Clear fields if no product selected
                        row.querySelector('.product-description').textContent = '';
                        row.querySelector('.item-rate').value = 0;
                        row.querySelector('.item-rate-display').textContent = '0.00';
                        row.querySelector('.gst-rate').textContent = '18';
                        row.querySelector('.item-quantity').value = '1';
                        calculateRowTotal(itemId);
                    }
                }

                // Calculate row total (Amazon style)
                function calculateRowTotal(itemId) {
                    const row = document.querySelector(`tr[data-item-id="${itemId}"]`);
                    if (!row) return;

                    const quantity = parseFloat(row.querySelector('.item-quantity').value) || 0;
                    const rate = parseFloat(row.querySelector('.item-rate').value) || 0;
                    const gstRate = parseFloat(row.querySelector('.gst-rate').textContent) || 18;

                    // Calculate amounts (GST-inclusive pricing)
                    const totalAmount = quantity * rate;
                    const taxableAmount = totalAmount / (1 + gstRate / 100);
                    const taxAmount = totalAmount - taxableAmount;

                    // Update display
                    row.querySelector('.taxable-amount').textContent = taxableAmount.toFixed(2);
                    row.querySelector('.tax-amount').textContent = taxAmount.toFixed(2);
                    row.querySelector('.item-total').textContent = totalAmount.toFixed(2);

                    calculateTotals();
                }

                // Calculate overall totals
                function calculateTotals() {
                    let totalTaxableAmount = 0;
                    let totalTaxAmount = 0;
                    let totalAmount = 0;
                    let totalItems = 0;
                    let totalQty = 0;

                    const rows = document.querySelectorAll('#itemsTableBody tr');
                    rows.forEach(row => {
                        const quantity = parseFloat(row.querySelector('.item-quantity').value) || 0;
                        const taxableAmount = parseFloat(row.querySelector('.taxable-amount').textContent) || 0;
                        const taxAmount = parseFloat(row.querySelector('.tax-amount').textContent) || 0;
                        const itemTotal = parseFloat(row.querySelector('.item-total').textContent) || 0;

                        if (quantity > 0) {
                            totalItems++;
                            totalQty += quantity;
                            totalTaxableAmount += taxableAmount;
                            totalTaxAmount += taxAmount;
                            totalAmount += itemTotal;
                        }
                    });

                    // Update summary displays
                    document.getElementById('totalItemsQty').textContent = `${totalItems} / ${totalQty}`;
                    document.getElementById('taxableAmount').textContent = totalTaxableAmount.toFixed(2);
                    document.getElementById('gstAmount').textContent = totalTaxAmount.toFixed(2);
                    document.getElementById('totalAmount').textContent = totalAmount.toFixed(2);
                    document.getElementById('amountPayable').textContent = totalAmount.toFixed(2);

                    // Update amount in words
                    document.getElementById('amountInWords').textContent = numberToWords(totalAmount) + ' Only.';
                }

                // Remove item row
                function removeItemRow(itemId) {
                    const row = document.querySelector(`tr[data-item-id="${itemId}"]`);
                    if (row) {
                        row.remove();
                        updateItemNumbers();
                        calculateTotals();

                        // Show no items message if table is empty
                        const tbody = document.getElementById('itemsTableBody');
                        if (tbody.children.length === 0) {
                            document.getElementById('noItemsMessage').style.display = 'block';
                        }
                    }
                }

                // Update item numbers after deletion
                function updateItemNumbers() {
                    const rows = document.querySelectorAll('#itemsTableBody tr');
                    rows.forEach((row, index) => {
                        row.children[0].textContent = index + 1;
                    });
                }

                // Simple number to words conversion
                function numberToWords(num) {
                    if (num === 0) return 'Zero';

                    const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];
                    const teens = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
                    const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];

                    function convertHundreds(n) {
                        let result = '';
                        if (n >= 100) {
                            result += ones[Math.floor(n / 100)] + ' Hundred ';
                            n %= 100;
                        }
                        if (n >= 20) {
                            result += tens[Math.floor(n / 10)] + ' ';
                            n %= 10;
                        } else if (n >= 10) {
                            result += teens[n - 10] + ' ';
                            return result;
                        }
                        if (n > 0) {
                            result += ones[n] + ' ';
                        }
                        return result;
                    }

                    const [rupees, paisa] = num.toFixed(2).split('.');
                    let result = '';
                    const rupeesNum = parseInt(rupees);

                    if (rupeesNum >= 10000000) {
                        result += convertHundreds(Math.floor(rupeesNum / 10000000)) + 'Crore ';
                        const remainder = rupeesNum % 10000000;
                        if (remainder >= 100000) {
                            result += convertHundreds(Math.floor(remainder / 100000)) + 'Lakh ';
                            const thousand = remainder % 100000;
                            if (thousand >= 1000) {
                                result += convertHundreds(Math.floor(thousand / 1000)) + 'Thousand ';
                                const hundred = thousand % 1000;
                                if (hundred > 0) {
                                    result += convertHundreds(hundred);
                                }
                            }
                        }
                    } else if (rupeesNum >= 100000) {
                        result += convertHundreds(Math.floor(rupeesNum / 100000)) + 'Lakh ';
                        const remainder = rupeesNum % 100000;
                        if (remainder >= 1000) {
                            result += convertHundreds(Math.floor(remainder / 1000)) + 'Thousand ';
                            const hundred = remainder % 1000;
                            if (hundred > 0) {
                                result += convertHundreds(hundred);
                            }
                        }
                    } else if (rupeesNum >= 1000) {
                        result += convertHundreds(Math.floor(rupeesNum / 1000)) + 'Thousand ';
                        const hundred = rupeesNum % 1000;
                        if (hundred > 0) {
                            result += convertHundreds(hundred);
                        }
                    } else {
                        result += convertHundreds(rupeesNum);
                    }

                    if (result) result += 'Rupees';

                    const paisaNum = parseInt(paisa);
                    if (paisaNum > 0) {
                        if (result) result += ' and ';
                        result += convertHundreds(paisaNum) + 'Paisa';
                    }

                    return result.trim();
                }

                // Notification function
                function showNotification(message, type = 'info') {
                    // Create toast notification
                    const toast = document.createElement('div');
                    toast.className = `fixed top-4 right-4 p-4 rounded-lg text-white z-50 transform transition-all duration-300 ${type === 'success' ? 'bg-green-500' :
                        type === 'error' ? 'bg-red-500' :
                            type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
                        }`;
                    toast.textContent = message;
                    document.body.appendChild(toast);

                    // Auto remove after 3 seconds
                    setTimeout(() => {
                        toast.remove();
                    }, 3000);
                }

                // Validate form data
                function validateForm() {
                    const clientName = document.getElementById('clientName').value.trim();
                    const clientEmail = document.getElementById('clientEmail').value.trim();
                    const billingAddress = document.getElementById('billingAddress').value.trim();
                    const tableBody = document.getElementById('itemsTableBody');
                    const rows = tableBody.querySelectorAll('tr');

                    if (!clientName) {
                        showNotification('Please enter customer name', 'error');
                        return false;
                    }

                    if (!clientEmail) {
                        showNotification('Please enter customer email', 'error');
                        return false;
                    }

                    if (!billingAddress) {
                        showNotification('Please enter billing address', 'error');
                        return false;
                    }

                    if (rows.length === 0) {
                        showNotification('Please add at least one item', 'error');
                        return false;
                    }

                    // Check if all rows have products selected
                    for (let row of rows) {
                        const productSelect = row.querySelector('.product-select');
                        const quantity = row.querySelector('.item-quantity').value;

                        if (!productSelect.value) {
                            showNotification('Please select a product for all items', 'error');
                            return false;
                        }

                        if (!quantity || quantity <= 0) {
                            showNotification('Please enter valid quantity for all items', 'error');
                            return false;
                        }
                    }

                    return true;
                }

                // Collect form data
                function collectFormData() {
                    const formData = {
                        clientName: document.getElementById('clientName').value.trim(),
                        clientEmail: document.getElementById('clientEmail').value.trim(),
                        clientPhone: document.getElementById('clientPhone').value.trim(),
                        billingAddress: document.getElementById('billingAddress').value.trim(),
                        shippingAddress: document.getElementById('shippingAddress').value.trim() || document.getElementById('billingAddress').value.trim(),
                        placeOfSupply: document.getElementById('placeOfSupply').value,
                        notes: document.getElementById('invoiceNotes').value.trim(),
                        items: []
                    };

                    // Collect items data
                    const rows = document.querySelectorAll('#itemsTableBody tr');
                    rows.forEach(row => {
                        const productSelect = row.querySelector('.product-select');
                        const quantity = row.querySelector('.item-quantity').value;
                        const rate = row.querySelector('.item-rate').value;
                        const gstRate = row.querySelector('.gst-rate').textContent;

                        if (productSelect.value && quantity && rate) {
                            formData.items.push({
                                productId: productSelect.value,
                                quantity: parseFloat(quantity),
                                rate: parseFloat(rate),
                                gstRate: parseFloat(gstRate)
                            });
                        }
                    });

                    return formData;
                }

                // Generate Invoice PDF function (combines save + PDF generation)
                document.getElementById('generateInvoiceBtn').addEventListener('click', async function () {
                    console.log('Generate Invoice button clicked'); // Debug log

                    if (!validateForm()) {
                        console.log('Form validation failed'); // Debug log
                        return;
                    }

                    const formData = collectFormData();
                    console.log('Form data collected:', formData); // Debug log
                    console.log('Form data as JSON:', JSON.stringify(formData)); // Additional debug

                    const generateBtn = this;

                    // Disable button and show loading
                    generateBtn.disabled = true;
                    generateBtn.textContent = 'Creating Invoice...';

                    try {
                        console.log('Sending fetch request to /create-invoice'); // Debug log

                        // Step 1: Create and save the invoice
                        const response = await fetch('/create-invoice', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(formData)
                        });

                        console.log('Fetch request sent, response status:', response.status); // Debug log
                        console.log('Response headers:', Object.fromEntries(response.headers)); // Debug log

                        const result = await response.json();
                        console.log('Response result:', result); // Debug log

                        if (result.success) {
                            showNotification('Invoice created successfully!', 'success');

                            // Update button text for PDF generation
                            generateBtn.textContent = 'Generating PDF...';

                            // Step 2: Generate and download PDF
                            setTimeout(() => {
                                const link = document.createElement('a');
                                link.href = `/generate-pdf/${result.invoice._id}`;
                                link.download = `${result.invoice.invoiceNumber}.pdf`;
                                document.body.appendChild(link);
                                link.click();
                                document.body.removeChild(link);

                                showNotification('PDF downloaded successfully!', 'success');

                                // Optionally reset form or redirect
                                setTimeout(() => {
                                    if (confirm('Invoice generated successfully! Do you want to create another invoice?')) {
                                        window.location.reload();
                                    } else {
                                        window.location.href = '/admin-portal';
                                    }
                                }, 1000);
                            }, 500);

                        } else {
                            showNotification(result.message || 'Error creating invoice', 'error');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        showNotification('Network error. Please try again.', 'error');
                    } finally {
                        // Re-enable button
                        generateBtn.disabled = false;
                        generateBtn.textContent = 'Generate Invoice PDF';
                    }
                });
            </script>

    </body>

    </html>